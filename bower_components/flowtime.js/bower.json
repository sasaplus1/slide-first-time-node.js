{
  "name": "flowtime.js",
  "version": "0.0.0",
  "description": "Flowtime.js is a framework for easily building HTML presentations or websites.",
  "main": "js/flowtime.js",
  "keywords": [
    "presentation",
    "html5",
    "css3"
  ],
  "homepage": "https://github.com/marcolago/flowtime.js",
  "bugs": "https://github.com/marcolago/flowtime.js/issues",
  "author": {
    "name": "Marco Lago",
    "email": "marcolago@marcolago.com",
    "url": "http://absolide.tumblr.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/marcolago/flowtime.js.git"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "gitHead": "96bdc2923033d969115bfcdc47355f6a1db9050b",
  "readme": "![Flowtime.js](https://github.com/marcolago/flowtime.js/raw/master/assets/img/logo-black.png \"Flowtime.js Logo\")\n\n### Flowtime.js is a framework for easily build HTML presentations or websites.  \n\nYou can take a look at the [sample presentation](http://flowtime-js.marcolago.com) to quick learn about the possibilities:\n\n**For more information check the [wiki](https://github.com/marcolago/flowtime.js/wiki)**\n- [Browser Support](https://github.com/marcolago/flowtime.js/wiki/Browser-Support)\n- [Made with Flowtime.js](https://github.com/marcolago/flowtime.js/wiki/Made-With-Flowtime.js)\n- [Credits and Thanks](https://github.com/marcolago/flowtime.js/wiki/Credits-and-Thanks)\n\n## UPDATES\n\n- **May 12 2013**\n  - Added the autoplay configuration functions and `start()`, `pause()` and `stop()` methods. ([#18](https://github.com/marcolago/flowtime.js/issues/18))\n  - Now the presentations is loopable both for page and section navigation. ([#18](https://github.com/marcolago/flowtime.js/issues/18)) \n\n## Main Features\n\n**Full Page Fluid Layout Boilerplate**.  \nFlowtime.js is designed to perfectly fit your viewport and is based on a solid `display: inline-block;` foundation.  \nThis frameworks doesn't style your presentations or sites for you but it takes care of all the annoying things like navigation and deep-linking, so you are free to style every single element of your design as you like.\nBut for the ones who need a ready-to-use tool it comes with a default theme that you can edit or you can add new themes just by linking your css files.\n\n**Multiple Controls Navigation**.  \nYou can navigate through pages via links, keyboard or deep-linking.  \nLinks are managed using the href value targeting a formatted hash destination; see the demos source code for more examples.  \nKeyboard navigation is based on arrow keys with the Shift key as a modifier to jump over fragments or sections, see the command list:\n\n- **Down or Up Arrows**: navigate to the previous or the next page. This is the main navigation input; the entire content is navigable using this keys only. If there are fragments in the page every input shows or hides a fragment.\n- **Shift + Down or Up Arrows**: navigate to the prev o next page jumping all the fragments.\n- **Left or Right Arrows**: navigate to the prev or next section. By default the destination will be the page at the same index of the starting point (if you are at page 3 in the section 2 you will go to the page 3 in the section 3). If the same index does not exist the destination will be the higher available index..\n- **Shift + Left or Right Arrows**: Navigate to the first page of the previous or next section.\n- **Page Up**: navigates to the first page of the current section.\n- **Page Down**: navigates to the last page of the current section.\n- **Home**: navigates to the first page of the presentation.\n- **End**: navigates to the last page of the presentation.\n- **ESC**: toggles the overview mode.\n\n**Fragments Support**.  \nNavigate step by step in a page or jump directly to the next or previous page.  \nYou can hide or show every single fragment with special behaviour managed and styled by CSS classes and you can even nest fragments.\n\n**Overview Mode**.  \nOverview mode allows you to look at the entire site/presentation structure in a single view or from a distant point of view (alternate version).\nWhen in overview mode you can navigate to a page by click on it or using the arrow keys and **then press Return to go**.\n\n**History Management**.  \nFlowtime.js is built on top of the **HTML History APIs** so you can navigate using the browser's back and forward buttons and deep-link a page for sharing.\nFlowtime.js is a client side only framework so if you want to optimize SEO you have to add a server side logic to serve only the single page content to search engines.\nIf the History APIs were not available the framework degrades well using the hashchange event.\n\n**Transitions**.  \nFlowtime.js animate the page transition using **native CSS3 transitions**. Where transitions were not available (IE9) the page change is immediate but works.\n\n**Parallax Support**\nIntegrated native parallax support based on CSS3 transformations and configurable by data- attributes.\n\n**Browser Support**\nFlowtime.js is tested and works on **every modern desktop browser and IE9 and above**.  \nWhere the basic support is not available the framework degrades to a native scrolling with anchor links but the full page fluid layouts remains intact.\n\n## How to build the markup\n\nMarkup for Flowtime.js is really simple and easy to learn.\nAll you have to do is wrap some divs in a parent `<div class=\"flowtime\">`, then, marking up the section with `class=\"ft-section\"` and the single page with `class=\"ft-page\"`.\nTo better understand the markup take a look at this snippet:\n\n```html\n    <div class=\"flowtime\">\n      <div class=\"ft-section\">\n        <div class=\"ft-page\">Section 1 / Page 1</div>\n        <div class=\"ft-page\">Section 1 / Page 2</div>\n      </div>\n    </div>\n```\n\nEvery single page is a full window view - or a single slide if you prefer - and it's a relative formatting context.\nEven if you have only single slides ordered in a row you have to nest the pages in sections; take a look at this markup which creates two slides one aside the other:\n\n```html\n    <div class=\"flowtime\">\n      <div class=\"ft-section\">\n        <div class=\"ft-page\">Section 1 / Page 1</div>\n      </div>\n      <div class=\"ft-section\">\n        <div class=\"ft-page\">Section 2 / Page 1</div>\n      </div>\n    </div>\n```\n\n### Titles and Pages URL\n\nFlowtime.js sets automatically the title in the browser's tab on navigation reading it from the first `h1` on the page. If you want to override a title or use a different string instead of the heading content you can set a `data-title` attribute to the page.\nYou can add the `data-title` attribute both to `ft-section` and to `ft-page` elements; if a `data-title` attribute was found on a section it will be used to write the title in the browser tab with this schema:\n\n`<title> text content [ | data-title on ft-section ] | h1 text content or data-title on ft-page`\n\nA `data-prog` attribute is added to every div marked as `ft-section` or as `ft-page` in order to manage the navigation.\nIf you want to customize the URL and the hashtag you can add some data attributes to any section or page.\nYou can add the `data-id` attribute both to `ft-section` and to `ft-page` elements; if this attribute was found it will be used to build the page URL.\nTo better understand the use of data attributes here it is an example:\n\n```html\n    <div class=\"flowtime\">\n      <div class=\"ft-section\" data-id=\"section-1\">\n        <div class=\"ft-page\" data-id=\"page-1\">\n            <h1>Heading Title</h1>\n            When navigating to this page the title will be \"site name | Heading Title\"\n            and the URL will be \"http://site_URL/#/section-1/page-1/\"\n        </div>\n      </div>\n      <div class=\"ft-section\" data-title=\"Section 2 Title\" data-id=\"section-2\">\n        <div class=\"ft-page\" data-title=\"Page 1 Title\" data-id=\"page-1\">\n            When navigating to this page the title will be \"site name | Section 2 Title | Page 1 Title\"\n            and the URL will be \"http://site_URL/#/section-2/page-1/\"\n        </div>\n      </div>\n      <div class=\"ft-section\"data-id=\"section-3\">\n        <div class=\"ft-page\" data-title=\"Page Title\" data-id=\"page-1\">\n            When navigating to this page the title will be \"site name | Page Title\"            \n            and the URL will be \"http://site_URL/#/section-3/page-1/\"\n        </div>\n      </div>\n    </div>\n```\n\n### Fragments\n\nIf you want to delay the showing and navigate single parts in a page just put the class `ft-fragment` on the element you want to delay. Here it is an example.\n\n```html\n    <div class=\"flowtime\">\n      <div class=\"ft-section\" data-title=\"Section 1 Title\" data-id=\"section-1\">\n        <div class=\"ft-page\" data-title=\"Page 1 Title\" data-id=\"page-1\">\n            <p>First Paragraph; this text is visible from start.</p>\n            <p class=\"ft-fragment\">This paragraph shows up only when you navigate forward and disappears when you navigate back.</p>\n        </div>\n      </div>\n    </div>\n```\n\nYou can also add some classes to trigger special behaviours for fragments.  \nThe `step` class partially fades out a fragment when the next one is selected; for example: `<p class=\"ft-fragment step\">`  \nThe `shy` class completely hides a fragment when it lose the focus; for example: `<p class=\"ft-fragment shy\">`\n\n### Parallax\n\nIf you want to enable the parallax effect on some elements add a `parallax` class to these elements and, optionally, sets the parallax distance value adding a `data-parallax` attribute specifying the `x` and `y` values separated by a comma. If you doesn't specify a `data-parallax` attribute will be used the default lengths.\n\n```html\n    <div class=\"flowtime\">\n      <div class=\"ft-section\" data-id=\"section-1\">\n        <div class=\"ft-page\" data-id=\"page-1\">\n            <p class=\"parallax\">Parallaxed element. Will use the default lengths.</p>\n            <p class=\"parallax\" data-parallax=\"100,150\">Parallaxed element. Will use the data-parallax attribute values.</p>\n            <p class=\"parallax\" data-parallax=\"200\">Parallaxed element. Will use the data-parallax attribute value; x and y will be the same length.</p>\n        </div>\n      </div>\n    </div>\n```\n\n## Javascript API\n\nFlowtime.js comes with configuration APIs useful for customizing the experience and the installation and with navigation APIs for controlling navigation and get the state of the application.\n\n### Configuration API\n\n```javascript\nFlowtime.start();\n```\n\nStarts the application logic. This method is optional but is required if you change some configuration parameters.\nIf you does'n call the `start()` method Flowtime.js starts itself but some configuration parameters will be applied only after the first navigation action.  \nYou can pass as optional parameters the same parameters that are accepted by the `gotoPage` method (see below) to let the presentation navigating to a specific page at start.\n\n```javascript\nFlowtime.updateNavigation();\n```\n\nForce the update of the navigation object which stores the data about every possibile destination in the site (the sub pages).\nIf you change the number of sub pages at runtime call this method after the DOM manipulation.\n\n```javascript\nFlowtime.showProgress(Boolean show);\n```\n\nDefault `false`. Show the default progress when in page mode (the standard content navigation mode).\nThe default progress is a miniature of the structure placed in the lower left corner with the current page highlighted.\nClicking on a page thumb in the default progress indicator triggers the navigation to that page.\nThe default value is false, so if you wanto to show the progress you have to call `Flowtime.showProgress(true);` and then start the presentation.\nCalling this API during the navigation cause the progress to appear or disappear manipulating the DOM so watch out for performance issues.\nYou are not limited to the default progress indicator. If you want to buil your own progress bar or another indicator with a custom logic you can listen for the navigation events and use the event properties (check out the event section).\n\n```javascript\nFlowtime.fragmentsOnSide(Boolean show);\n```\n\nDefault `false`. Enable the fragments navigation also on section navigation (left and right arrows) and no only on page navigation.\nIf true it also set `fragmentsOnBack` on `true`.\n\n```javascript\nFlowtime.fragmentsOnBack(Boolean show);\n```\n\nDefault `true`. Shows or hide the fragments when navigating back from a section to a page with fragments inside.\n\n```javascript\nFlowtime.useHistory(Boolean use);\n```\n\nDefault `true`. Enable or disable the use of HTML History API;\nIf History API is not used Flowtime.js fallbacks on the hashchange event.\n\n```javascript\nFlowtime.slideInPx(Boolean usePx);\n```\n\nDefault `false`. If true performs the calculation for the container translation in pixels and not in % values.\nUse true if you want to alter the default placement of the sections (i.e. setting `vertical-align` different from `top`) or in any case the pages does not perfectly fit the viewport (i.e. Safari for Windows with the `font-size: 0;` bug).\n\n```javascript\nFlowtime.sectionsSlideToTop(Boolean toTop);\n```\n\nDefault `true`. Set to false if you want to customize the fragment animation with a more complex behaviour. This methd enables or disables the animation only and not the internal fragments counter logic. See the event section for more info on how manage a custom fragment navigation.\n\n```javascript\nFlowtime.gridNavigation(Boolean useGrid);\n```\n\nDefault `false`. Just a proxy for `Flowtime.sectionsSlideToTop` but with reversed value; if `true` sets `Flowtime.sectionsSlideToTop` to `False`. Implemented just because the more semantic and easy to understand naming.\n\n```javascript\nFlowtime.useOverviewVariant(Boolean use);\n```\n\nDefault `false`. Uses a built in overview variant which does not show all the pages in a single view but center the current page in the available space scroualtirlling the view when navigating with the arrows.\nIn Webkit browsers the default overview mode can cause rendering problems if the pages are too much; using the variant you can minimize the problem.\n\n```javascript\nFlowtime.defaultParallaxValues(Number x, [Number y]);\n```\n\nSets the default values for parallax elements so you doesn't have to set the values for every single element.  \nIf you only pass the `x` value the `y` value will be the same.\n\n```javascript\nFlowtime.parallaxInPx(Boolean usePx);\n```\n\nDefault `false`. By default all the parallax length are computed in % units. If true the lenght expressed in `defaultParallaxValues` and in `data-parallax` attributes will be computed in pixels.\n\n```javascript\nFlowtime.autoplay(Boolean status, [Number delay], [Boolean autostart], [Boolean skipFragments]);\n```\n\nSets the status of the autoplay feature.\n`status` parameter sets the autoplay flag to `true` or `false`, if `true` you can use `play()` and `pause()` functions to start and stop the autoplay.\n`delay` sets the time between the page navigation in milliseconds; the default value is 10 seconds (10000 milliseconds).\nIf `autostart` is `true` the autoplay feature starts just right after this call (default `true`).\n`skipFragments` allows to go to the next page skipping all the fragments on the page (default `false`).\n\n```javascript\nFlowtime.loop(Boolean loop);\n```\n\nDefault `false`. If true you can loop the navigation both for the sections and for the pages so you can back to the start of the presentation navigating forward from the last page.\n\n### Navigation API\n\n```javascript\nFlowtime.prevSection([Boolean top]);` and `Flowtime.nextSection([Boolean top]);\n```\n\nNavigate to the previous or the next section.  \nIf the optional `top` parameter is `true` the section starts at the first page; if the `top` parameter is `false` the section starts at the page with the same index than the previous section or, if the index does not exist, at the last page available.\n\n```javascript\nFlowtime.prev([Boolean jump]);` and `Flowtime.next([Boolean jump]);\n```\n\nNavigate to the previous or the next page or, if there are fragments, to the previous or next fragment.  \nIf the optional `jump` parameter is `true` all the fragments will be jumped.\n\n```javascript\nFlowtime.prevFragment();` and `Flowtime.nextFragment();\n```\n\nNavigate to the previous or the next fragment.\n\n```javascript\nFlowtime.gotoHome()\n```\n\nNavigate to the first page of the presentation.\n\n```javascript\nFlowtime.gotoEnd()\n```\n\nNavigate to the last page of the presentation.\n\n```javascript\nFlowtime.gotoTop()\n```\n\nNavigate to the first page of the current section.\n\n```javascript\nFlowtime.gotoBottom()\n```\n\nNavigate to the last page of the current section.\n\n```javascript\nFlowtime.gotoPage(Number sectionIndex, Number pageIndex)\n```\n\nNavigate to the section/page pair.\n\n```javascript\nFlowtime.gotoPage(String sectionId, String pageId)\n```\n\nNavigate to the section/page pair.\n\n```javascript\nFlowtime.gotoPage(HTMLElement target)\n```\n\nNavigate to the page element.\n\n```javascript\nFlowtime.toggleOverview([Boolean back]);\n```\n\nToggles the overview mode switching between overview and page mode.\nIf the optional `back` paramerter is `true` toggling the overview mode when in overview does not navigate to the highlighted page but will returns to the active page; default `false`.\n\n```javascript\nFlowtime.play();\n```\n\nStarts the autoplay timer with the configured values (see `Flowtime.autoplay()` method) or with the default ones.\n\n```javascript\nFlowtime.pause();\n```\n\nPauses the autoplay timer without resetting the delay.\n\n```javascript\nFlowtime.stop();\n```\n\nStops the autoplay timer resetting the delay.\n\n### Data API\n\n```javascript\nFlowtime.getSection();\n```\n\nGets a reference to the current section HTML Element.\n\n```javascript\nFlowtime.getPage();\n```\n\nGets a reference to the current page HTML Element.\n\n```javascript\nFlowtime.getSectionIndex();\n```\n\nGets the index starting at `0` of the current section.\n\n```javascript\nFlowtime.getPageIndex();\n```\n\nGets the index starting at `0` of the current page.\n\n### Events\n\nWhen navigating Flowtime.js dispatches a `flowtimenavigation` event useful for create custom behaviours and callbacks.  \nYou can register the event using `Flowtime.addEventListener(\"flowtimenavigation\", callback, useCapture);` API. \nThe callback receive an `event` parameter with some custom properties useful to manage the navigation status.  \nHere it is the list of the properties, supposing the event parameter is named `e`:\n\n```javascript\ne.section\n```\n\nThe HTMLElement reference to the current section.\n\n```javascript\ne.page\n```\n\nThe HTMLElement reference to the current page.\n\n```javascript\ne.sectionIndex\n```\n\nThe current section index starting at 0.\n\n```javascript\ne.pageIndex\n```\n\nThe current page index starting at 0.\n\n```javascript\ne.pastSectionIndex\n```\n\nThe previous visited section index starting at 0.\n\n```javascript\ne.pastPageIndex\n```\n\nThe previous visited page index starting at 0.\n\n```javascript\ne.prevSection\n```\n\nBoolean value, if `true` there is a previous section.\n\n```javascript\ne.nextSection\n```\n\nBoolean value, if `true` there is a next section.\n\n```javascript\ne.prevPage\n```\n\nBoolean value, if `true` there is a previous page.\n\n```javascript\ne.nextPage\n```\n\nBoolean value, if `true` there is a next page.\n\n```javascript\ne.fragment\n```\n\nIf the navigation targets a fragment returns the fragment itself as HTMLElement, otherwise returns `undefined`.\n\n```javascript\ne.fragmentIndex\n```\n\nReturns the index of the current fragment starting at 0; otherwise returns `-1`.\n\n```javascript\ne.isOverview\n```\n\nBoolean value, `true` if the overview mode is on, `false` if the overview mode is off.\n\n```javascript\ne.progress\n```\n\nThe current page sequential index number starting at 0.\n\n```javascript\ne.total\n```\n\nThe last page sequential index.\n\n```javascript\ne.isAutoplay\n```\n\nThe status of the autoplay feature.\n\n```javascript\ne.isLoopable\n```\n\n`true` if Flowtime.js is configured for looping.\n\n## Customizing and Styling Default Components and Behaviours\n\nAs said before Flowtime.js comes with some default components like the two overview variants and a progress indicator.  \nYou can change the way this parts appears editing or overwriting some CSS properties.\n\n### Calculating the Completion Percentage for Custom Visualization\n\nIn the `flowtimenavigation` event handler calculate the progress in % using this formula:\n\n```javascript\n    function navigationHandler(e)\n    {\n      var value = Math.round(e.progress * 100 / e.total);\n      console.log('Completion: ' + value + '%');\n    }\n```\n\nThe first page of the first section **ever returns 0 as progress value**.  \n`progress` and `total` values does not consider fragments.\n\n### Customize the Fragments Animation\n\nEvery animation in Flowtime.js is managed with native CSS3 transitions so if you would customize the fragment animation (and you want to do this on a website, I know) just edit the following CSS classes to override the transitions or set the default value of the `opacity` to `1`.\n\n```css\n  .ft-fragment {\n    opacity: 0;\n         -o-transition: all 0.3s cubic-bezier(.77, .10, .22, 1);\n        -ms-transition: all 0.3s cubic-bezier(.77, .10, .22, 1);\n       -moz-transition: all 0.3s cubic-bezier(.77, .10, .22, 1);\n    -webkit-transition: all 0.3s cubic-bezier(.77, .10, .22, 1);\n            transition: all 0.3s cubic-bezier(.77, .10, .22, 1);\n  }\n\n  .ft-fragment.revealed, .ft-fragment.revealed-temp {\n    opacity: 1;\n  }\n\n  .ft-overview .ft-default-progress {\n    opacity: 0;\n    pointer-events: none;\n  }\n```\n\n### Customize the Look of Pages in Overview Mode\n\nTo customize the way the thumbnails in overview mode look when idle, hovered and higlighted edit or override this CSS classes:\n\n```css\n  /* default progress page thumb */\n  \n  .ft-page-thumb {\n       -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    width: 1rem;\n    height: 0.7rem;\n    margin-right: 1px;\n    margin-bottom: 1px;\n    background-color: rgba(0,0,0,0.7);\n    cursor: pointer;\n         -o-transition: background-color 0.5s;\n        -ms-transition: background-color 0.5s;\n       -moz-transition: background-color 0.5s;\n    -webkit-transition: background-color 0.5s;\n            transition: background-color 0.5s;\n  }\n\n  .ft-page-thumb:hover {\n    background-color: rgba(255,255,255,0.7);\n  }\n\n  .ft-page-thumb.actual {\n    background-color: rgba(255,255,255,0.5);\n    border: 1px solid #ffffff;  \n  }\n\n  /* overview mode page highlighting */\n\n  .ft-overview .ft-page.actual {\n    opacity: 0.3;\n  }\n\n  .ft-overview .ft-page.hilite {\n    opacity: 1;\n  }\n\n  .ft-overview .ft-page:hover {\n    opacity: 1;\n  }\n```\n",
  "readmeFilename": "README.md",
  "_id": "Flowtime.js@1.0.0",
  "commit": "96bdc2923033d969115bfcdc47355f6a1db9050b"
}